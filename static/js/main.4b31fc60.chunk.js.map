{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","search","showCard","count","setState","searchHandler","e","preventDefault","axios","method","url","headers","params","then","res","result","data","total","className","Jumbotron","fluid","style","backgroundColor","Container","Form","FormGroup","row","Input","onClick","this","onChange","target","value","type","id","placeholder","Button","Card","CardBody","CardTitle","fontSize","fontStyle","width","src","alt","CardText","fontWeight","Component","App","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4YAiBqBA,E,2MACjBC,MAAQ,CACJC,OAAQ,KACRC,UAAU,EACVC,MAAO,I,EAEXD,SAAW,WACP,EAAKE,SAAS,CAACF,UAAU,K,EAE7BG,cAAgB,SAACC,GACbA,EAAEC,iBACFC,IAAM,CACFC,OAAO,MACPC,IAAI,uEACJC,QAAQ,CACJ,UAAW,oCAEfC,OAAO,CACH,MAAQ,EAAKZ,MAAMC,OACnB,UAAa,OAGpBY,KAAK,SAACC,GACH,IAAMC,EAASD,EAAIE,KACnB,EAAKZ,SAAS,CAACD,MAAMY,EAAOC,KAAKC,MAAOf,UAAS,O,wEAKhD,IAAD,OACJ,OACI,6BACI,yBAAKgB,UAAU,QACX,kBAACC,EAAA,EAAD,CAAYC,OAAK,EAACC,MAAO,CAACC,gBAAgB,YACtC,kBAACC,EAAA,EAAD,CAAWH,OAAK,GAChB,wBAAIF,UAAU,oCAAd,iBACA,uBAAGA,UAAU,+BAAb,2FAIR,kBAACM,EAAA,EAAD,CAAMN,UAAU,eACZ,kBAACO,EAAA,EAAD,CAAWC,KAAG,GACV,kBAACC,EAAA,EAAD,CAAOC,QAASC,KAAK3B,SAAU4B,SAAW,SAAAxB,GAAC,OAAI,EAAKF,SAAS,CAACH,OAAQK,EAAEyB,OAAOC,SAAUd,UAAU,gBAAgBe,KAAK,OAAOC,GAAG,SAASC,YAAY,oBAE3J,kBAACC,EAAA,EAAD,CAAQR,QAASC,KAAKxB,cAAegB,MAAO,CAACC,gBAAgB,WAAYJ,UAAU,QAAnF,UAEHW,KAAK7B,MAAME,SACZ,kBAACmC,EAAA,EAAD,CAAMnB,UAAU,OAAOG,MAAO,CAACC,gBAAgB,YAC3C,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWrB,UAAU,mBAAmBG,MAAO,CAACmB,SAAS,GAAIC,UAAU,WAAkC,KAAtBZ,KAAK7B,MAAMC,OAAc,0BAA0B4B,KAAK7B,MAAMC,SAEjJ,yBAAKyC,MAAM,OAAOC,IAAI,GAAGC,IAAI,KAC7B,kBAACN,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAU3B,UAAU,cAApB,qBAAmD,0BAAMG,MAAO,CAACyB,WAAY,IAAKN,SAAS,KAAMX,KAAK7B,MAAMG,OAA5G,yBAGX,Q,GAxDiB4C,aCDnBC,MAXf,WACE,OACE,yBAAK3B,MAAO,CAACC,gBAAgB,UAAW2B,OAAO,UAC7C,kBAAC1B,EAAA,EAAD,KACE,kBAAC,EAAD,SCGY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC,iB","file":"static/js/main.4b31fc60.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './../App.css';\r\nimport axios from 'axios';\r\nimport {\r\n    Jumbotron,\r\n    Container,\r\n    Form,\r\n    FormGroup,\r\n    Input,\r\n    Card,\r\n    CardBody,\r\n    CardTitle,\r\n    Button,\r\n    CardText\r\n} from 'reactstrap';\r\n\r\n\r\nexport default class Home extends Component{\r\n    state = {\r\n        search: null,\r\n        showCard: false,\r\n        count: ''\r\n    }\r\n    showCard = () => {\r\n        this.setState({showCard: false})\r\n    }\r\n    searchHandler = (e) => {\r\n        e.preventDefault();\r\n        axios({\r\n            method:\"GET\",\r\n            url:\"https://api.scripture.api.bible/v1/bibles/de4e12af7f28f599-01/search\",\r\n            headers:{\r\n                'api-key': 'ee871a86e7881105663511d95e362970'\r\n            },\r\n            params:{\r\n                'query':this.state.search,\r\n                \"fuzziness\": \"0\"\r\n            }\r\n        })\r\n        .then((res) => {\r\n            const result = res.data;\r\n            this.setState({count:result.data.total, showCard:true})\r\n        })\r\n    \r\n        \r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"pt-5\">\r\n                    <Jumbotron  fluid style={{backgroundColor:\"#FE6F27\"}}>\r\n                        <Container fluid>\r\n                        <h1 className=\"display-3 text-center text-white\">Christ Counts</h1>\r\n                        <p className=\"lead text-center text-white\">A small application that tells you how many times a word is referenced in the bible.</p>\r\n                        </Container>\r\n                    </Jumbotron>\r\n                </div>\r\n                <Form className=\"text-center\">\r\n                    <FormGroup row>\r\n                        <Input onClick={this.showCard} onChange={ e => this.setState({search: e.target.value},)} className=\" mx-auto w-50\" type=\"text\" id='search' placeholder=\"Type a word...\" />\r\n                    </FormGroup>\r\n                    <Button onClick={this.searchHandler} style={{backgroundColor:\"#FE6F27\"}} className=\"w-25\">Count</Button>\r\n                </Form>\r\n                {this.state.showCard?\r\n                <Card className=\"mt-5\" style={{backgroundColor:\"#FE6F27\"}}>\r\n                    <CardBody>\r\n                        <CardTitle className=\"text-white title\" style={{fontSize:60, fontStyle:\"italic\"}}>{this.state.search === \"\"?\"Search term apears here\":this.state.search}</CardTitle>\r\n                        </CardBody>\r\n                        <img width=\"100%\" src=\"\" alt=\"\" />\r\n                        <CardBody>\r\n                            <CardText className=\"text-white\">This word appears <span style={{fontWeight: 600, fontSize:30}}>{this.state.count}</span> times in the bible</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n                :\"\"\r\n                }   \r\n            </div>\r\n           \r\n        )\r\n    }\r\n}","import React from 'react';\nimport Home from './components/Home';\nimport {Container} from 'reactstrap';\n\n\nfunction App() {\n  return (\n    <div style={{backgroundColor:\"#2F2D29\", height:\"100vh\"}}>\n      <Container>\n        <Home />\n      </Container>\n    </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}